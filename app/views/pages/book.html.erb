<div class="book-container">
  <div class="book-page-1">
      <div class="book-next-page">
        <div class="book-next" onclick="nextPage()">
          <i class="fas fa-arrow-right" style='color:#F26419'></i>
          <p>Select Participants</p>
        </div>
      </div>
    <div class="booking-title">
      <h2>Select Workshop to Book</h2>
    </div>
    <div class="index-controls-filter-bar-book">
      <div class="index-controls-filter-bar-block-book">
        <%= render 'book_content_filter' %>
      </div>
    </div>
    <div class="workshop-grid">
      <div class="workshop-cards-book container">
        <%= render 'pages/book_content_index', contents: @contents %>
      </div>
      <div class="workshop-cards-selected container" id='selected'>
        <div class="ghost-card">
          <p>Drag & drop cards you wish to book.</p>
        </div>
      </div>
    </div>
  </div>
  <div class="book-page-2 hidden">
      <div class="flex-row-between-centered">
        <div class="book-next-page" onclick="previousPage()">
          <div class="book-next">
            <i class="fas fa-arrow-left" style='color:#F26419'></i>
            <p>Select Workshops</p>
          </div>
        </div>
        <div class="book-next-page" onclick="nextPage()">
          <div class="book-next">
            <i class="fas fa-arrow-right" style='color:#F26419'></i>
            <p>Select Dates</p>
          </div>
        </div>
      </div>
    <div class="booking-title users-title">
      <h2>Select Participants to Book</h2>
    </div>
    <div class="index-controls-filter-bar-book">
      <div class="btn-white" onclick='openFilter();'>
        <i class="fas fa-filter"></i>
        <p>Filter</p>
      </div>
    </div>
    <div class="organisation-filter-container">
    <div class="organisation-filter-background" onclick='closeFilter();'></div>
      <% interest_for = [] %>
      <div class="organisation-filter-dropright">
        <%= render 'pages/book_user_filter_dropright', interest_for: interest_for %>
      </div>
    </div>
    <div class="users-book-grid">
      <div class="users-book container">
        <%= render 'pages/book_user_index', users: @users, interest_for: interest_for %>
      </div>
      <div class="users-book-selected container">
        <div class="headers-div">
          <p onclick='removeAll(this);'>Remove all</p>
        </div>
      </div>
    </div>
  </div>
  <div class="book-page-3 hidden">
    <div class="book-confirm">
    <div class="book-next-page" onclick="previousPage()">
      <div class="book-next">
        <i class="fas fa-arrow-left" style='color:#F26419'></i>
        <p>Select Users</p>
      </div>
    </div>
    <%= link_to '', dashboard_path, class: 'confirm-button hidden' %>
    <button class='btn-orange' onclick='bookDates()'><p>Confirm</p></button>
    </div>
    <div class="booking-title dates-title">
      <h2>Select Dates</h2>
    </div>
    <div class="date-book">
      <% selected_users = [] %>
      <% selected_contents = [] %>
      <%= render 'pages/book_dates', selected_contents: selected_contents %>
    </div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/easy-autocomplete/1.3.5/jquery.easy-autocomplete.min.js"></script>

<script>



  page = 1;

  pageone = document.querySelector('.book-page-1')
  pagetwo = document.querySelector('.book-page-2')
  pagethree = document.querySelector('.book-page-3')
  containers = document.querySelectorAll('.container')

  function nextPage() {
    if (page == 1) {
      document.querySelector('.filter_user').querySelector('.hidden-submit').click()
      setTimeout(function(){
        pageone.classList.add('hidden')
        pagetwo.classList.remove('hidden')
      }, 250)
    } else {
      pagetwo.classList.add('hidden')
      pagethree.classList.remove('hidden')
      document.querySelector('.filter_content').querySelector('.hidden-submit').click()
    }
    page += 1
  }

  function previousPage() {
    if (page == 3) {
      pagethree.classList.add('hidden')
      pagetwo.classList.remove('hidden')
    } else {
      pagetwo.classList.add('hidden')
      pageone.classList.remove('hidden')
    }
    page -= 1
  }

  formGuardian = false

  function outsideClick(event, notelem) {
    notelem = $(notelem); // jquerize (optional)
    // check outside click for multiple elements
    var clickedOut = true, i, len = notelem.length;
    for (i = 0;i < len;i++)  {
        if (event.target == notelem[i] || notelem[i].contains(event.target)) {
            clickedOut = false;
        }
    }
    if (clickedOut) return true;
    else return false;
  }

  function bookWorkshop (element) {
    card = element.closest('.card-interest-book');
    bookcontainer = document.querySelector('.workshop-cards-selected')
    selectcontainer = document.querySelector('.workshop-cards-book')
    cart = card.querySelector('#cart')
    undo = card.querySelector('#undo')
    ghostcard = document.querySelector('.ghost-card')
    if (element.closest('.workshop-cards-selected')) {
      cart.classList.remove('hidden')
      undo.classList.add('hidden')
      selectcontainer.append(card)
    } else {
      bookcontainer.append(card)
      cart.classList.add('hidden')
      undo.classList.remove('hidden')
    }
    if (bookcontainer.querySelector('.card-interest-book') != null) {
      ghostcard.classList.add('hidden')
    } else {
      ghostcard.classList.remove('hidden')
    }
    selected_cards = document.querySelector('.workshop-cards-selected').querySelectorAll('.card-interest-book')
    storage_var = []
    selected_cards.forEach((card) => {
      storage_var.push(card.id.split('-')[1])
    })
    selected_storage = document.getElementById('filter_content_selected')
    selected_storage.value = storage_var.join(',')
    interest_storage = document.getElementById('filter_user_interest_for')
    interest_storage.value = storage_var.join(',')
  }


  function dragRaceStart(element) {
    element.classList.add('dragging')
  }

  function dragRaceEnd(element) {
    element.classList.remove('dragging')
    selected_cards = document.querySelector('.workshop-cards-selected').querySelectorAll('.card-interest-book')
    storage_var = []
    selected_cards.forEach((card) => {
      storage_var.push(card.id.split('-')[1])
    })
    selected_storage = document.getElementById('filter_content_selected');
    selected_storage.value = storage_var.join(',')
    interest_storage = document.getElementById('filter_user_interest_for')
    interest_storage.value = storage_var.join(',')
  }

  containers.forEach(container => {
    container.addEventListener('dragover', e => {
      e.preventDefault()
      afterElement = getDragAfterElement(container, e.clientY)
      draggable = document.querySelector('.dragging')
      cart = draggable.querySelector('#cart')
      undo = draggable.querySelector('#undo')
      if (container.classList.contains('workshop-cards-book')) {
        cart.classList.remove('hidden')
        undo.classList.add('hidden')
      } else {
        cart.classList.add('hidden')
        undo.classList.remove('hidden')
      }
      if (afterElement == null) {
        container.appendChild(draggable)
        return false
      } else {
        container.insertBefore(draggable, afterElement)
        return false
      }
    })
  })

function getDragAfterElement(container, y, element) {
  const draggableElements = [...container.querySelectorAll('.draggable:not(.dragging)')]

  return draggableElements.reduce((closest, child) => {
    const box = child.getBoundingClientRect()
    const offset = y - box.top - box.height / 2
    if (offset < 0 && offset > closest.offset) {
      return { offset: offset, element: child }
    } else {
      return closest
    }
  }, { offset: Number.NEGATIVE_INFINITY }).element
}

function openFilter() {
  filter_container = document.querySelector('.organisation-filter-container');
  filter_dropright = document.querySelector('.organisation-filter-dropright');
  filter_container.style.display = 'flex';
  setTimeout(function(){
    filter_dropright.style.width = '400px';
  }, 1);
}

function closeFilter() {
  filter_container = document.querySelector('.organisation-filter-container');
  filter_dropright = document.querySelector('.organisation-filter-dropright');
  filter_dropright.style.width = '0px';
  setTimeout(function(){
    filter_container.style.display = 'none';
  }, 250);
}

function hideClearFilterButton() {
  form = document.querySelector('.filter_user');
  form.querySelectorAll('.organisation-filter-block').forEach((element) => {
    checked = false;
    element.querySelectorAll('input.check_boxes').forEach((checkbox) => {
      if (checkbox.checked == true) {
        checked = true;
      }
    })
    if (checked == false) {
      element.querySelector('.organisation-filter-block-title-buttons').querySelector('p').style.opacity = '0';
    }
  })
}

function autoSubmit(element) {
  element.parentNode.parentNode.parentNode.parentNode.querySelector('.organisation-filter-block-title-buttons').querySelector('p').style.opacity = '1';
  hideClearFilterButton();
  document.querySelector('.filter_user').querySelector('.hidden-submit').click();
}

rotated = 0

function toggleTagCategoryDropdown(element) {
  element.querySelector('i').style.webkitTransform = 'rotate('+ (rotated + 180).toString() +'deg)';
  element.querySelector('i').style.mozTransform    = 'rotate('+ (rotated + 180).toString() +'deg)';
  element.querySelector('i').style.msTransform     = 'rotate('+ (rotated + 180).toString() +'deg)';
  element.querySelector('i').style.oTransform      = 'rotate('+ (rotated + 180).toString() +'deg)';
  element.querySelector('i').style.transform       = 'rotate('+ (rotated + 180).toString() +'deg)';
  rotated = rotated + 180;
  block = element.parentNode.parentNode.parentNode.parentNode;
  if (block.style.maxHeight == '61px' || block.style.maxHeight == '') {
    block.style.maxHeight = '1000px';
    block.classList.add('active');
  } else {
    block.style.maxHeight = '61px';
    block.classList.remove('active');
  }
}

function clearFilter(element) {
  block = element.parentNode.parentNode.parentNode.parentNode;
  block.querySelectorAll('input.check_boxes').forEach((element) => {
    if (element.checked == true) {
      element.checked = false;
    }
  })
  hideClearFilterButton();
  document.querySelector('.filter_user').querySelector('.hidden-submit').click();
}

function resetFilter() {
  form = document.querySelector('.filter_user');
  form.querySelectorAll('.check_boxes').forEach((element) => {
    if (element.checked == true) {
      element.checked = false;
    }
  })
  hideClearFilterButton();
  form.querySelector('.hidden-submit').click();
}

var selected = document.getElementById('selected')
var ghostcard = document.querySelector('.ghost-card')

function removeGhost() {
  if (selected.querySelector('.draggable') == null) {
    ghostcard.classList.remove('hidden')
  } else {
    ghostcard.classList.add('hidden')
  }
}

function removeFilter(element) {
  filter_tag = element.parentNode;
  storage = document.querySelector('#filter_content_themes')
  array = storage.value.split(',');
  array = array.filter(function(value, index, arr){
    return value != element.getAttribute('data-id');
  });
  storage.value = array.join(',');
  filter_tag.remove();
  storage.parentNode.querySelector('.hidden-submit').click();
}

function selectUser(element) {
  card = element.parentNode.parentNode
  user_container = document.querySelector('.users-book')
  selected_container = document.querySelector('.users-book-selected')
  if (card.parentNode == user_container) {
    selected_container.appendChild(card)
  } else {
    user_container.appendChild(card)
  }
  selected_users = selected_container.querySelectorAll('.user-index-card-book')
  storage_var = []
  selected_users.forEach((user) => {
    storage_var.push(user.id.split('-')[1])
  })
  document.getElementById('filter_user_selected').value = storage_var.join(',')
  document.querySelector('.filter_user').querySelector('.hidden-submit').click();
}

function addDate(element) {
  card = element.closest('.book-selected-card')
  /*new_card = card.cloneNode(true)*/
  new_card = document.createElement('div')
  new_card.classList.add('book-selected-card')
  new_card.innerHTML = card.innerHTML
  form = new_card.querySelector('form')
  element.classList.add('hidden')
  card.parentNode.insertBefore(new_card, card.nextSibling)
  flatpickr(".datepicker", {
    disableMobile: true,
    dateFormat: "d/m/Y",
  });
}

function bookDates() {
  if (formGuardian == false) {
    selected_users = document.querySelector('.users-book-selected').querySelectorAll('.user-index-card-book')
    storage_var = []
    selected_users.forEach((user) => {
      storage_var.push(user.id.split('-')[1])
    })
    users = document.querySelector('.date-book').querySelectorAll('#session_selected_users')
    users.forEach((user) => {
      user.value = storage_var.join(',')
    })
    submit_buttons = document.querySelector('.date-book').querySelectorAll('.hidden-submit')
    redirect_button = document.querySelector('.confirm-button')
    submit_buttons.forEach((element) => {
      console.log(element)
      setTimeout(function(){element.click()}, 100)
    })
    setTimeout(function(){redirect_button.click()}, 1000)
  }
}

function addAll(source) {
  document.querySelector('.users-book').querySelectorAll('.select-user').forEach((element) => {
    element.checked = true
    card = element.parentNode.parentNode
    user_container = document.querySelector('.users-book')
    selected_container = document.querySelector('.users-book-selected')
    selected_container.appendChild(card)
  })
  selected_users = selected_container.querySelectorAll('.user-index-card-book')
  storage_var = []
  selected_users.forEach((user) => {
    storage_var.push(user.id.split('-')[1])
  })
  document.getElementById('filter_user_selected').value = storage_var.join(',')
  document.querySelector('.filter_user').querySelector('.hidden-submit').click();
}

function removeAll(source) {
  document.querySelector('.users-book-selected').querySelectorAll('.select-user').forEach((element) => {
    element.checked = false
    card = element.parentNode.parentNode
    user_container = document.querySelector('.users-book')
    selected_container = document.querySelector('.users-book-selected')
    user_container.appendChild(card)
  })
  selected_users = selected_container.querySelectorAll('.user-index-card-book')
  storage_var = []
  selected_users.forEach((user) => {
    storage_var.push(user.id.split('-')[1])
  })
  document.getElementById('filter_user_selected').value = storage_var.join(',')
  document.querySelector('.filter_user').querySelector('.hidden-submit').click();
}

$input = $("[data-behavior='autocomplete']");

var options = {
  listLocation: "categories",
  getValue: 'title',
  url: function(phrase) {
    return "/categories_search.json?search=" + phrase
  },
  list: {
    onChooseEvent: function() {
      var id = $input.getSelectedItemData().id;
      var title = $input.getSelectedItemData().title;
      container = document.querySelector('.filtered_themes');
      new_category = document.createElement("div");
      new_category.innerHTML = "<p>" + title + "</p><i class='fas fa-times' data-id="+ id +" onclick='removeFilter(this);'></i>";
      container.appendChild(new_category);
      storage = document.querySelector('#filter_content_themes')
      if (storage.value != '') {
        storage.value = storage.value + ',' + id;
      } else {
        storage.value = id;
      }
      $input[0].value = '';
      storage.parentNode.querySelector('.hidden-submit').click();
    },
    match: {
      enabled: true
    }
  }
}

$input.easyAutocomplete(options);

</script>

