<script src="https://unpkg.com/infinite-scroll@4/dist/infinite-scroll.pkgd.min.js"></script>
<div class="book-container">
  <div class="book-page-1">
    <div class="booking-title">
      <h2 id='top-anchor'>Select Workshop to Book</h2>
    </div>
    <div class="book-confirm">
      <div style='width: 120px;'></div>
    <div class="book-page-guide">
      <div class="page-book-info">
        <div class="page-number">
          <p>1</p>
        </div>
        <div class="page-name">
          <p>Select Workshop</p>
        </div>
      </div>
      <span class='book-line'></span>
      <div class="page-book-info">
        <div class="page-number book-page-indicator-2 disabled">
          <p>2</p>
        </div>
        <div class="page-name">
          <p>Select Participants</p>
        </div>
      </div>
      <span class='book-line-1'></span>
      <div class="page-book-info">
        <div class="page-number book-page-indicator-3 disabled">
          <p>3</p>
        </div>
        <div class="page-name">
          <p>Select Dates</p>
        </div>
      </div>
    </div>
      <div class="book-next-page">
        <div class="book-next" onclick="nextPage()">
          <i class="fas fa-arrow-right fa-3x" style='color:#F26419'></i>
          <p>Select Participants</p>
        </div>
      </div>
    </div>
    <div class="index-controls-filter-bar-book">
      <div id="organisation-controls__user-search">
        <%= render 'book_content_filter' %>
      </div>
    </div>
    <div class="workshop-grid">
      <div class="workshop-cards-selected row" id='selected'>
      </div>
      <div class="workshop-cards-book row">
        <%= render 'pages/book_content_index', contents: @contents %>
      </div>
    </div>
  </div>
  <div class="book-page-2 hidden">
    <div class="booking-title users-title">
      <h2>&nbsp;</h2>
    </div>
    <div class="book-confirm">
      <div class="book-next-page" onclick="previousPage()">
        <div class="book-next">
          <i class="fas fa-arrow-left fa-3x" style='color:#F26419'></i>
          <p>Select Workshops</p>
        </div>
      </div>
      <div class="book-page-guide">
        <div class="page-book-info">
          <div class="page-number disabled">
            <p>1</p>
          </div>
          <div class="page-name">
            <p>Select Workshop</p>
          </div>
        </div>
        <span class='book-line'></span>
        <div class="page-book-info">
          <div class="page-number book-page-indicator-2">
            <p>2</p>
          </div>
          <div class="page-name">
            <p>Select Participants</p>
          </div>
        </div>
        <span class='book-line-1'></span>
        <div class="page-book-info">
          <div class="page-number book-page-indicator-3 disabled">
            <p>3</p>
          </div>
          <div class="page-name">
            <p>Select Dates</p>
          </div>
        </div>
      </div>
      <div class="book-next-page" onclick="nextPage()">
        <div class="book-next">
          <i class="fas fa-arrow-right fa-3x" style='color:#F26419'></i>
          <p>Select Dates</p>
        </div>
      </div>
    </div>
    <div class="index-controls-filter-bar-book">
      <div class="btn-white" onclick='openFilter();'>
        <i class="fas fa-filter"></i>
        <p>Filter</p>
      </div>
      <div class="add-remove-users">
        <p onclick='addAll(this);' style='cursor:pointer;' class='add-selected'>Add All</p>
        <p onclick='removeAll(this);' style='cursor:pointer;' class='remove-selected'>Remove all</p>
      </div>
    </div>
    <div class="organisation-filter-container">
    <div class="organisation-filter-background" onclick='closeFilter();'></div>
      <% interest_for = [] %>
      <div class="organisation-filter-dropright">
        <%= render 'pages/book_user_filter_dropright', interest_for: interest_for %>
      </div>
    </div>
    <% selected_filter = [] %>
    <div class="book-user-filter-tags">
      <%= render 'pages/book_user_filter_tags', selected_filter: selected_filter %>
    </div>
    <div class="users-book-selected">
    </div>
    <div class="users-book-all">
      <%= paginate @users, remote: true %>
      <%= render 'pages/book_user_index', users: @users, interest_for: interest_for %>
    </div>
    <div class="users-book-filtered hidden">
      <%= render 'pages/book_user_index', users: @users, interest_for: interest_for, selected_filter: selected_filter %>
    </div>
  </div>
  <div class="book-page-3 hidden">
    <div class="booking-title dates-title">
      <h2>Select Dates</h2>
    </div>
    <div class="book-confirm">
      <div class="book-next-page" onclick="previousPage()">
        <div class="book-next">
          <i class="fas fa-arrow-left fa-3x" style='color:#F26419'></i>
          <p>Select Users</p>
        </div>
      </div>
      <div class="book-page-guide">
        <div class="page-book-info">
          <div class="page-number disabled">
            <p>1</p>
          </div>
          <div class="page-name">
            <p>Select Workshop</p>
          </div>
        </div>
        <span class='book-line '></span>
        <div class="page-book-info">
          <div class="page-number book-page-indicator-2 disabled">
            <p>2</p>
          </div>
          <div class="page-name">
            <p>Select Participants</p>
          </div>
        </div>
        <span class='book-line-1 '></span>
        <div class="page-book-info">
          <div class="page-number book-page-indicator-3">
            <p>3</p>
          </div>
          <div class="page-name">
            <p>Select Dates</p>
          </div>
        </div>
      </div>
      <%= link_to '', dashboard_path, class: 'confirm-button hidden' %>
      <button id='book-confirm-button' class='btn-white-border-disabled' onclick='bookDates(this)' style='margin-bottom: 15px' disabled='true'><p>Confirm</p></button>
    </div>
    <div class="date-book">
      <% selected_users = [] %>
      <% selected_contents = [] %>
      <%= render 'pages/book_dates', selected_contents: selected_contents %>
    </div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/easy-autocomplete/1.3.5/jquery.easy-autocomplete.min.js"></script>

<script>

  page = 1;

  pageone = document.querySelector('.book-page-1')
  pagetwo = document.querySelector('.book-page-2')
  pagethree = document.querySelector('.book-page-3')
  containers = document.querySelectorAll('.container')

  formGuardian = false


  function nextPage() {
    if (page == 1) {
      setTimeout(function(){
        pageone.classList.add('hidden')
        pagetwo.classList.remove('hidden')
      }, 250)
    } else {
      selected_container = document.querySelector('.users-book-selected')
      selected_users = selected_container.querySelectorAll('.user-book-card')
      storage_var = []
      selected_users.forEach((user) => {
        storage_var.push(user.id.split('-')[1])
      })
      session_card_forms = document.querySelectorAll('#session_selected_users')
      session_card_forms.forEach((element) => {
        element.value = storage_var.join(',')
      })
      document.getElementById('filter_user_selected').value = storage_var.join(',')
      setTimeout(function(){
        pagetwo.classList.add('hidden')
        pagethree.classList.remove('hidden')
      }, 250)
    }
    page += 1
    confirm_button = document.querySelector('#book-confirm-button')
    if (page == 3 && document.querySelector('.date-book').childNodes.length > 1) {
      confirm_button.classList.add('btn-white-border')
      confirm_button.classList.remove('btn-white-border-disabled')
      confirm_button.disabled = false;
    } else {
      confirm_button.classList.add('btn-white-border-disabled')
      confirm_button.classList.remove('btn-white-border')
      confirm_button.disabled = true;
    }
  }

  function previousPage() {
    if (page == 3) {
      pagethree.classList.add('hidden')
      pagetwo.classList.remove('hidden')
    } else {
      pagetwo.classList.add('hidden')
      pageone.classList.remove('hidden')
    }
    page -= 1
  }

  function outsideClick(event, notelem) {
    notelem = $(notelem);
    var clickedOut = true, i, len = notelem.length;
    for (i = 0;i < len;i++)  {
        if (event.target == notelem[i] || notelem[i].contains(event.target)) {
            clickedOut = false;
        }
    }
    if (clickedOut) return true;
    else return false;
  }

  function updateCards() {
    selected_container = document.querySelector('.workshop-cards-selected')
    selected_cards = selected_container.querySelectorAll('.booklet-col')
    storage_var = []
    selected_cards.forEach((card) => {
      storage_var.push(card.id.split('-')[1])
    })
    selected_storage = document.getElementById('filter_content_selected')
    selected_storage.value = storage_var.join(',')
    interest_storage = document.getElementById('filter_user_interest_for')
    interest_storage.value = storage_var.join(',')
    if (selected_container.children.length > 0) {
      selected_container.style.borderBottom = '1px solid #c4c4c4'
    } else {
      selected_container.style.borderBottom = 'none'
    }
    document.querySelector('.filter_content').querySelector('.hidden-submit').click();
  }

  function updateUsers() {
    selected_container = document.querySelector('.users-book-selected')
    selected_users = selected_container.querySelectorAll('.user-book-card')
    storage_var = []
    selected_users.forEach((user) => {
      storage_var.push(user.id.split('-')[1])
    })
    document.getElementById('filter_user_selected').value = storage_var.join(',')
    document.querySelector('.filter_user').querySelector('.hidden-submit').click()
  }

  function addCard(element) {
    newCard = document.createElement("div");
    newCard.classList.add('booklet-col','col-xl-4', 'col-lg-6', 'col-md-12')
    existingcard = element.closest('.booklet-col')
    newCard.innerHTML = existingcard.innerHTML
    circle = newCard.querySelector('#notselected')
    circle.classList.add('hidden')
    remove = newCard.querySelector('#removecard')
    remove.classList.remove('hidden')
    syn = newCard.querySelector('.booklet-card-syn')
    asyn = newCard.querySelector('.booklet-card-asyn')
    theme = newCard.querySelector('.booklet-card-theme')
    remove.style.background = 'transparent'
    newCard.setAttribute("id", existingcard.id)
    content = document.querySelector('.workshop-cards-selected')
    content.append(newCard)
    theme.classList.add('theme-white')
    if (newCard.contains(syn)) {
      syn.style.backgroundColor = '#F8D9C8'
    } else {
      asyn.style.backgroundColor = '#C4C4C4'
    }
    updateCards()
  }

  function selectCard(element) {
    card = element.closest('.booklet-col')
    emptycircle = card.querySelector('#notselected')
    added = card.querySelector('#added')
    selected = document.querySelector('.workshop-cards-selected')
    if (selected.contains(card)) {
      card_id = card.id
      card.remove()
    } else if (document.querySelector('.workshop-cards-book').contains(card)) {
      addCard(element)
      card.remove()
    } else {
    }
    updateCards()
    window.location = (""+window.location).replace(/#[A-Za-z0-9_]*$/,'')+"#top-anchor"
  }

  function addUser(element) {
    newUser = document.createElement("div");
    newUser.classList.add('user-book-card')
    existinguser = element.closest('.user-book-card')
    cardcontent = existinguser.innerHTML
    newUser.id = existinguser.id
    newUser.innerHTML = cardcontent
    circle = newUser.querySelector('#nouser')
    circle.classList.add('hidden')
    newUser.style.backgroundColor = '#F8D9C8'
    removeuser = newUser.querySelector('#removeuser')
    removeuser.classList.remove('hidden')
    removeuser.style.backgroundColor = 'transparent'
    newUser.setAttribute("id", existinguser.id)
    content = document.querySelector('.users-book-selected')
    content.append(newUser)
    updateUsers()
  }

  function selectUser(element) {
    user = element.closest('.user-book-card')
    empty = user.querySelector('#nouser')
    adduser = user.querySelector('#adduser')
    selecteduser = document.querySelector('.users-book-selected')
    if (selecteduser.contains(user)) {
      card_id = user.id
      document.querySelector('.users-book-all').querySelector('#' + card_id).classList.remove('hidden')
      user.remove()
      updateUsers()
    } else if (document.querySelector('.users-book-all').contains(user)) {
      document.querySelector('.users-book-all').querySelector('#' + user.id).classList.add('hidden')
      addUser(element);
    } else if (document.querySelector('.users-book-filtered').contains(user)) {
      document.querySelector('.users-book-all').querySelector('#' + user.id).classList.add('hidden')
      addUser(element);
      user.remove()
    } else {
    }
  }

  function addAll(source) {
    if (document.querySelector('.users-book-all').classList.contains('hidden')) {
      container = document.querySelector('.users-book-filtered')
      container_bis = document.querySelector('.users-book-all')
    } else {
      container = document.querySelector('.users-book-all')
      container_bis = document.querySelector('.users-book-filtered')
    }
    container.querySelectorAll('.select-user').forEach((element) => {
      newUser = document.createElement("div");
      newUser.classList.add('user-book-card')
      existinguser = element.closest('.user-book-card')
      existinguser_bis = container_bis.querySelector('#'+existinguser.id)
      cardcontent = existinguser.innerHTML
      newUser.id = existinguser.id
      newUser.innerHTML = cardcontent
      circle = newUser.querySelector('#nouser')
      circle.classList.add('hidden')
      newUser.style.backgroundColor = '#F8D9C8'
      removeuser = newUser.querySelector('#removeuser')
      removeuser.classList.remove('hidden')
      removeuser.style.backgroundColor = 'transparent'
      newUser.setAttribute("id", existinguser.id)
      content = document.querySelector('.users-book-selected')
      content.append(newUser)
      existinguser.classList.add('hidden')
      existinguser_bis.classList.add('hidden')
    })
    selected_users = document.querySelector('.users-book-selected').querySelectorAll('.user-book-card')
    storage_var = []
    selected_users.forEach((user) => {
      storage_var.push(user.id.split('-')[1])
    })
    document.getElementById('filter_user_selected').value = storage_var.join(',')
    document.querySelector('.filter_user').querySelector('.hidden-submit').click();
    document.querySelector('body').classList.add('wait');
  }

  function removeAll(source) {
    document.querySelector('.users-book-selected').querySelectorAll('.user-book-card').forEach((element) => {
      card_to_remove = element
      card_to_show_all = document.querySelector('.users-book-all').querySelector('#' + element.id)
      card_to_show_all.classList.remove('hidden')
      element.remove()
    })
    selected_users = document.querySelector('.users-book-selected').querySelectorAll('.user-book-card')
    storage_var = []
    selected_users.forEach((user) => {
      storage_var.push(user.id.split('-')[1])
    })
    document.getElementById('filter_user_selected').value = storage_var.join(',')
    document.querySelector('.filter_user').querySelector('.hidden-submit').click();
    document.querySelector('body').classList.add('wait');
  }

  function openFilter() {
    filter_container = document.querySelector('.organisation-filter-container');
    filter_dropright = document.querySelector('.organisation-filter-dropright');
    filter_container.style.display = 'flex';
    setTimeout(function(){
      filter_dropright.style.width = '400px';
    }, 1);
  }

  function closeFilter() {
    filter_container = document.querySelector('.organisation-filter-container');
    filter_dropright = document.querySelector('.organisation-filter-dropright');
    filter_dropright.style.width = '0px';
    setTimeout(function(){
      filter_container.style.display = 'none';
    }, 250);
  }

  function hideClearFilterButton() {
    form = document.querySelector('.filter_user');
    form.querySelectorAll('.organisation-filter-block').forEach((element) => {
      checked = false;
      element.querySelectorAll('input.check_boxes').forEach((checkbox) => {
        if (checkbox.checked == true) {
          checked = true;
        }
      })
      if (checked == false) {
        element.querySelector('.organisation-filter-block-title-buttons').querySelector('p').style.opacity = '0';
      }
    })
  }

  function autoSubmit(element) {
    element.parentNode.parentNode.parentNode.parentNode.querySelector('.organisation-filter-block-title-buttons').querySelector('p').style.opacity = '1';
    hideClearFilterButton();
    document.querySelector('.filter_user').querySelector('.hidden-submit').click();
    document.querySelector('body').classList.add('wait');
  }

  rotated = 0

  function toggleTagCategoryDropdown(element) {
    element.querySelector('i').style.webkitTransform = 'rotate('+ (rotated + 180).toString() +'deg)';
    element.querySelector('i').style.mozTransform    = 'rotate('+ (rotated + 180).toString() +'deg)';
    element.querySelector('i').style.msTransform     = 'rotate('+ (rotated + 180).toString() +'deg)';
    element.querySelector('i').style.oTransform      = 'rotate('+ (rotated + 180).toString() +'deg)';
    element.querySelector('i').style.transform       = 'rotate('+ (rotated + 180).toString() +'deg)';
    rotated = rotated + 180;
    block = element.parentNode.parentNode.parentNode.parentNode;
    if (block.style.maxHeight == '61px' || block.style.maxHeight == '') {
      block.style.maxHeight = '1000px';
      block.classList.add('active');
    } else {
      block.style.maxHeight = '61px';
      block.classList.remove('active');
    }
  }

  function clearFilter(element) {
    block = element.parentNode.parentNode.parentNode.parentNode;
    block.querySelectorAll('input.check_boxes').forEach((element) => {
      if (element.checked == true) {
        element.checked = false;
      }
    })
    hideClearFilterButton();
    document.querySelector('.filter_user').querySelector('.hidden-submit').click();
    document.querySelector('body').classList.add('wait');
  }

  function resetFilter() {
    form = document.querySelector('.filter_user');
    form.querySelectorAll('.check_boxes').forEach((element) => {
      if (element.checked == true) {
        element.checked = false;
      }
    })
    hideClearFilterButton();
    form.querySelector('.hidden-submit').click();
    document.querySelector('body').classList.add('wait');
  }

  function removeFilter(element) {
    filter_tag = element.parentNode;
    storage = document.querySelector('#filter_content_themes')
    array = storage.value.split(',');
    array = array.filter(function(value, index, arr){
      return value != element.getAttribute('data-id');
    });
    storage.value = array.join(',');
    filter_tag.remove();
    storage.parentNode.querySelector('.hidden-submit').click();
    document.querySelector('body').classList.add('wait');
  }

  function addDate(element) {
    date_cards = element.parentNode.parentNode.parentNode.querySelectorAll('.book-dates')
    date_card = date_cards[date_cards.length - 1]
    new_date_card = document.createElement('div')
    new_date_card.classList.add('book-dates')
    new_date_card.innerHTML = date_card.innerHTML
    new_date_card.querySelector('.booklet-card__cost-input').classList.add('hidden')
    date_card.querySelector('.remove_date').classList.add('hidden')
    new_date_card.querySelector('.remove_date').classList.remove('hidden')
    form = new_date_card.querySelector('form')
    date_card.parentNode.appendChild(new_date_card)
    if (date_cards.length + 1 >= 3) {
      element.classList.add('hidden')
    }
    flatpickr(".datepicker", {
      disableMobile: true,
      dateFormat: "d/m/Y",
    });
    flatpickr(".timepicker", {
      enableTime: true,
      noCalendar: true,
      dateFormat: "H:i",
    })
  }

  function duplicateCost(element) {
    cost = element.value
    element.closest('.booklet-card-objective-booking').querySelectorAll('#session_cost').forEach((input) => {
      input.value = cost
    })
  }

  function removeDate(element) {
    card = element.closest('.booklet-card-objective-booking')
    date_card = element.closest('.book-dates')
    date_card.remove();
    date_cards = card.querySelectorAll('.book-dates')
    if (date_cards.length > 1) {
      previous_card = date_cards[date_cards.length - 1]
      previous_card.querySelector('.remove_date').classList.remove('hidden')
    }
    card.parentNode.querySelector('.add-date').querySelector('p').classList.remove('hidden')
  }

  function bookDates(element) {
    if (formGuardian == false) {
      document.querySelector('body').classList.add('wait');
      element.disabled = true
      submit_buttons = document.querySelector('.date-book').querySelectorAll('.hidden-submit')
      document.querySelectorAll('.booklet-card-bottom-dates').forEach((el) => {
        duplicateCost(el.querySelector('#session_cost'))
      })
      redirect_button = document.querySelector('.confirm-button')
      submit_buttons.forEach((element) => {
        setTimeout(function(){element.click()}, 100)
      })
      setTimeout(function(){redirect_button.click()}, 1000)
    }
  }

  function checkDuration(element) {
    start_time_string = element.closest('form').querySelector('#session_starts_at').value
    start_time = new Date(2000, 0, 1, start_time_string.split(':')[0], start_time_string.split(':')[1], 0, 0);
    end_time_string = element.closest('form').querySelector('#session_ends_at').value
    end_time = new Date(2000, 0, 1, end_time_string.split(':')[0], end_time_string.split(':')[1], 0, 0);
    alert = element.closest('.booklet-card-syn-dates').querySelector('.duration-alert')
    if (Math.abs(end_time - start_time) / (1000*60) < parseInt(element.closest('form').querySelector('#session_duration').value,10)) {
      alert.classList.remove('hidden')
    } else {
      alert.classList.add('hidden')
    }
  }

  function clearSearch(element) {
    document.querySelector('#filter_content_title').value = ''
    document.querySelector('#organisation-controls__user-search-clear').classList.add('hidden')
    element.parentNode.querySelector('.hidden-submit').click()
  }

  if (document.querySelector('.filter_content') != null) {
    search_input = document.querySelector('.filter_content').querySelector('input');
    clear_button = document.getElementById('organisation-controls__user-search-clear');
    search_input.addEventListener('keyup', event => {
      console.log('test')
      if (search_input.value != '' && clear_button.classList.contains('hidden')) {
        clear_button.classList.remove('hidden');
      } else if (search_input.value == '') {
        clear_button.classList.add('hidden');
      }
    })
  }

  $input = $("[data-behavior='autocomplete']");

  var options = {
    listLocation: "categories",
    getValue: 'title',
    url: function(phrase) {
      return "/categories_search.json?search=" + phrase
    },
    list: {
      onChooseEvent: function() {
        var id = $input.getSelectedItemData().id;
        var title = $input.getSelectedItemData().title;
        container = document.querySelector('.filtered_themes');
        new_category = document.createElement("div");
        new_category.innerHTML = "<p>" + title + "</p><i class='fas fa-times' data-id="+ id +" onclick='removeFilter(this);'></i>";
        container.appendChild(new_category);
        storage = document.querySelector('#filter_content_themes')
        if (storage.value != '') {
          storage.value = storage.value + ',' + id;
        } else {
          storage.value = id;
        }
        $input[0].value = '';
        storage.parentNode.querySelector('.hidden-submit').click();
        document.querySelector('body').classList.add('wait');
      },
      match: {
        enabled: true
      }
    }
  }

  $input.easyAutocomplete(options);

  function infiniteScroll() {
    if ($("nav ul.pagination a[rel=next]").length) {
      $('.users-book-all').infiniteScroll({
        path: "nav ul.pagination a[rel=next]",
        append: ".user-book-card",
        hideNav: "nav ul.pagination",
        history: false,
        scrollThreshold: 3000,
        debug: false,
        loadOnScroll: true,
      });
    };
  }

  infiniteScroll()

</script>

