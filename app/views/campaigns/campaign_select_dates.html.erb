<div class="campaign-container">
  <div class="campaign-controls__dates">
    <div class="campaign-controls">
      <% params[:campaign].present? ? selected_campaign_type = params[:campaign][:selected_campaign_type] : selected_campaign_type = '' %>
      <% params[:campaign].present? ? selected_template = params[:campaign][:selected_template] : selected_template = '' %>
      <% params[:campaign].present? ? selected_users = params[:campaign][:selected_users] : selected_users = '' %>
      <% params[:campaign].present? ? selected_owner = params[:campaign][:selected_owner] : selected_owner = current_user.id %>
      <%= simple_form_for :campaign, url: campaign_select_template_path, method: :get do |f| %>
        <%= f.hidden_field :selected_campaign_type, value: selected_campaign_type %>
        <%= f.hidden_field :selected_template, value: selected_template %>
        <%= f.hidden_field :selected_users, value: selected_users %>
        <%= f.hidden_field :selected_owner, value: selected_owner %>
        <%= button_tag type: 'submit' do %>
          <div class="select-step-number-disabled">1</div><p>Select a Template</p>
        <% end %>
      <% end %>
      <%= image_tag('arrow-next.svg', height: '20', :class => "arrow-next") %>
      <%= simple_form_for :campaign, url: campaign_select_users_path, method: :get do |f| %>
        <%= f.hidden_field :selected_campaign_type, value: selected_campaign_type %>
        <%= f.hidden_field :selected_template, value: selected_template %>
        <%= f.hidden_field :selected_users, value: selected_users %>
        <%= f.hidden_field :selected_owner, value: selected_owner %>
        <%= button_tag type: 'submit' do %>
          <div class="select-step-number-disabled">2</div><p>Select Employees</p>
        <% end %>
      <% end %>
      <%= image_tag('arrow-next.svg', height: '20', :class => "arrow-next") %>
      <button class='active'><div class="select-step-number">3</div><p>Select Deadlines</p></button>
    </div>
    <div class='campaign-launch'>
      <%= link_to '', send_notification_email_path(id: ''), class: 'send-email-button hidden' %>
      <%= link_to '', campaigns_path, class: 'confirm-button hidden' %>
      <% selected_template = InterviewForm.find(@selected_template) %>
      <%= simple_form_for Campaign.new, remote: true do |f| %>
        <%= f.hidden_field :title, value: selected_template.title %>
        <%= f.hidden_field :interview_form_id, value: selected_template.id %>
        <%= f.hidden_field :selected_owner, value: selected_owner %>
        <%= f.hidden_field :campaign_type, value: selected_campaign_type %>
        <%= f.submit '', class: 'hidden-submit hidden' %>
      <% end %>
      <button class="back-arrow-btn-mobile" onclick="document.querySelectorAll('.simple_form.campaign')[1].querySelector('button').click()">
        <i class="fas fa-arrow-left"></i>
      </button>
      <% if params.dig(:campaign, :selected_campaign_type) == '1' %>
        <button id='campaign-confirm-button' data-toggle='modal' data-target='#sendEmail'>
          <p>LAUNCH INTERVIEW</p>
          <i class="fas fa-paper-plane no-margin"></i>
        </button>
      <% else %>
        <button id='campaign-confirm-button' onclick='createCampaign(this, false)'>
          <p>LAUNCH INTERVIEW</p>
          <i class="fas fa-paper-plane no-margin"></i>
        </button>
      <% end %>
    </div>
  </div>
  <div class="campaign-dates-container">
    <%= render 'campaigns/partials/campaign_select_dates_cards_index', selected_template: selected_template, selected_users: @selected_users %>
  </div>

  
  


<!------------>
<!-- MODALS -->
<!------------>

<div class='modal fade modal_folder' id='sendEmail' data-target='folder' tabindex='-1' role='dialog' aria-labelledby='myModalLabel' data-keyboard="false" data-backdrop="static">
  <div class='modal-dialog' role='document' style='border-radius: 20px'>
    <%= render 'campaigns/modals/send_notification_email_on_confirm' %>
  </div>
</div>


<!---------------->
<!-- JAVASCRIPT -->
<!---------------->

<script>
  function createCampaign(element, notification) {
    document.querySelector('#new_campaign').querySelector('.hidden-submit').click()
    submit_buttons = document.querySelector('.campaign-dates-container').querySelectorAll('.hidden-submit')
    send_email_button =  document.querySelector('.send-email-button')
    redirect_button = document.querySelector('.confirm-button')
    submit_buttons.forEach((element) => {
      setTimeout(function(){element.click()}, 500)
    })
    // TODO: no setTimeout => fetch and wait for Promise to respond
    if (notification) {
      setTimeout(function(){send_email_button.click()}, 1000)
    } else {
      setTimeout(function(){redirect_button.click()}, 1000)
    }
  }

  function checkInterval(element) {
    start = element.closest('form').querySelector('#interview_starts_at').value
    end = element.closest('form').querySelector('#interview_ends_at').value
    starts_at = new Date('01 Jan 1970 ' + start + ':00 GMT')
    ends_at = new Date('01 Jan 1970 ' + end + ':00 GMT')
    error_message = element.closest('form').querySelector('.date-error')
    if (ends_at < starts_at) {
      element.closest('form').querySelector('#interview_ends_at').value = element.closest('form').querySelector('#interview_starts_at').value
    }
  }

  function dateRangeOverlaps(a_start, a_end, b_start, b_end) {
    if (a_start <= b_start && b_start < a_end) return true; // b starts in a
    if (a_start < b_end   && b_end   <= a_end) return true; // b ends in a
    if (b_start <  a_start && a_end   <  b_end) return true; // a in b
    return false;
  }

  function multipleDateRangeOverlaps(array) {
    result_array = []
    var i, j;
    if (array.length % 2 !== 0)
      throw new TypeError('Arguments length must be a multiple of 2');
    for (i = 0; i < array.length - 2; i += 2) {
      for (j = i + 2; j < array.length; j += 2) {
        if (dateRangeOverlaps(array[i], array[i+1], array[j], array[j+1])) {
          result_array.push(i)
          result_array.push(j)
        }
      }
    }
    return result_array;
  }

  function checkInterviewOverlap() {
    date_array = []
    document.querySelectorAll('.simple_form.interview').forEach((form) => {
      date = form.querySelector('#interview_date').value.split('/').reverse().join('-')
      start = new Date(date + 'T' +form.querySelector('#interview_starts_at').value)
      end = new Date(date + 'T' +form.querySelector('#interview_ends_at').value)
      date_array.push(start)
      date_array.push(end)
    })
    result = multipleDateRangeOverlaps(date_array)
    if (result.length != 0) {
      result.forEach((element) => {
        document.querySelectorAll('.campaign-select-date-card__alert')[Math.floor(element / 2)].classList.remove('hidden')
      })
    } else {
      document.querySelectorAll('.campaign-select-date-card__alert').forEach((element) => {
        element.classList.add('hidden')
      })
    }
  }

  function checkDatePresence() {
    all_good = true
    button = document.querySelector('#campaign-confirm-button')
    document.querySelectorAll('#interview_date').forEach((date) => {
      if (date.value == '') {
        all_good = false
      }
    })
    if (all_good == false) {
      button.setAttribute('data-confirm', 'You have not selected dates for all employees. Continue ?')
    } else {
      button.removeAttribute('data-confirm')
    }
  }

  setTimeout(checkDatePresence, 500)
  // time for flatpickr(".datepicker-defaulting-to-end-of-month") to set default
</script>
