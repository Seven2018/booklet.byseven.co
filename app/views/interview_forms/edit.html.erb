<div class="centered-item p-2rem border-bottom-bkt-light-grey pos-rel" style='height: 9rem;'>
  <%= link_to interview_forms_path, class: "bkt-btn-back pos-abs", style: 'top: 3.6rem; left: 2rem;' do %>
    <span class="iconify" data-icon="bi:arrow-left"></span>
    <p>Back</p>
  <% end %>
  <h2>1 to 1 template</h2>
  <div class="height-5rem flex-row-between-centered pos-abs" style='top: 2rem; right: 2rem;'>
    <p class='bkt-green mr-2rem'>Up to date</p>
    <%= link_to interview_form_path(@template), class: 'flex-row-between-centered rounded-10px p-2rem', style: 'background: rgba(49, 119, 183, 0.1);' do %>
      <span class="iconify bkt-blue mr-1rem" data-icon="akar-icons:eye"></span>
      <p class='bkt-blue'>See template preview</p>
    <% end %>
  </div>
</div>

<div id="template-show__container" class='flex-row-between-start bkt-bg-light-grey2 pos-rel bkt-box-shadow-compact-top'>
  <div id="template-show__container-left" class='bkt-bg-white py-3rem px-5rem border-right-bkt-light-grey-1px'>
    <%= render 'interview_forms/edit/edit_show_summary', template: @template, page: 'edit' %>
  </div>

  <div id="template-show__container-right">

    <div id="template-edit__content" class='flex-row-between-start'>

      <div id="template-edit__content-center" class='flex-column-start-centered'>

        <div id="template-show__attributes-center" class='bkt-bg-white rounded-10px p-2rem mb-2rem' style='width: 100%; max-width: 64rem;'>
          <%= render 'interview_forms/edit/edit_template_attributes', template: @template, page: 'edit' %>
        </div>

        <div style='width: 100%; max-width: 64rem;'>
          <%= render 'interview_forms/edit/edit_add_question', position: 0 %>
        </div>

        <div id="template-show__lines" style='width: 100%; max-width: 64rem;'>
          <%= render 'interview_forms/edit/edit_questions_index', template: @template, page: 'edit' %>
        </div>

      </div>

      <div id="template-edit__content-right" class='pl-5rem'>
        <div class="template-show-attributes-right">
          <%= render 'interview_forms/partials/show_attributes_right', template: @template, page: 'edit' %>
        </div>
      </div>

    </div>

  </div>
</div>

<div class='line-templates hidden'>

  <div class="add-separator add-separator-template hidden active">
    <%= render 'interview_forms/edit/edit_question_form_template', question_type: 'separator', template_id: @template.id %>
  </div>

  <div class="add-open_question add-open_question-template hidden active">
    <%= render 'interview_forms/edit/edit_question_form_template', question_type: 'open_question', template_id: @template.id %>
  </div>

  <div class="add-rating add-rating-template hidden active">
    <%= render 'interview_forms/edit/edit_question_form_template', question_type: 'rating', template_id: @template.id %>
  </div>

  <div class="add-mcq add-mcq-template hidden">
    <%= render 'interview_forms/edit/edit_question_form_template', question_type: 'mcq', template_id: @template.id %>
  </div>

  <div class="add-objective add-objective-template hidden">
    <%= render 'interview_forms/edit/edit_question_form_template', question_type: 'objective', template_id: @template.id %>
  </div>

</div>


<!------------>
<!-- MODALS -->
<!------------>

<div class='modal fade' id='addTags' tabindex='-1' role='dialog' aria-labelledby='myModalLabel' data-keyboard="false">
  <div class='modal-dialog' role='document' style='border-radius: 20px'>
    <%= render 'interview_forms/modals/manage_tags', form: @template %>
  </div>
</div>


<!---------------->
<!-- JAVASCRIPT -->
<!---------------->

<script>

  ///////////
  // TOOLS //
  ///////////

  doubleClickGuardian = false
  saving = false

  function outsideClick(event, notelem) {
    notelem = $(notelem); // jquerize (optional)
    // check outside click for multiple elements
    var clickedOut = true, i, len = notelem.length;
    for (i = 0;i < len;i++)  {
        if (event.target == notelem[i] || notelem[i].contains(event.target)) {
            clickedOut = false;
        }
    }
    if (clickedOut) return true;
    else return false;
  }

  function submitForm(element) {
    element.closest('form').querySelector('.hidden-submit').click()
  }


  ///////////////////////
  // ADD QUESTION MENU //
  ///////////////////////

  function addQuestionMenu(element) {

    if (doubleClickGuardian == false) {
      doubleClickGuardian = true
      container = element.parentNode
      button_add = element
      button_remove = container.querySelector('.add_button_hide')
      menu = container.querySelector('.template-edit__add-question-menu')

      container.classList.add('active')
      button_add.classList.add('hidden')
      button_remove.classList.remove('hidden')
      menu.classList.remove('hidden')

      window.addEventListener('click', function(e) {
        if (doubleClickGuardian == false) {
          container.classList.remove('active')
          button_add.classList.remove('hidden')
          button_remove.classList.add('hidden')
          menu.classList.add('hidden')
          this.removeEventListener('click', arguments.callee, false);
        }
      });

      setTimeout(function(){doubleClickGuardian = false}, 100)
    }
  }

  function addQuestion(type, referenceNode) {
    newDiv = document.createElement("div")

    newDiv.classList.add('add-' + type)
    template = document.querySelector('.add-' + type + '-template')
    templateinfo = template.innerHTML
    newDiv.innerHTML = templateinfo
    position = referenceNode.id.split('-')[1]
    position_storage = newDiv.querySelector('#interview_question_position')

    position_storage.value = position
    content = document.querySelector('#template-show__lines')
    if (position == 0) {
      content.insertBefore(newDiv, content.firstChild)
    } else {
      content.insertBefore(newDiv, referenceNode.nextSibling)
    }
  }

  //////////////////////
  // QUESTION OPTIONS //
  //////////////////////

  function checkBookletCheckbox(element) {
    checkbox = element.querySelector('input')
    icon = element.querySelector('svg')

    if (checkbox.value == 'true') {
      checkbox.value = 'false'
      icon.classList.add('hidden')
    } else {
      checkbox.value = 'true'
      icon.classList.remove('hidden')
    }
    saveQuestion(element)
  }

  // function setRating(element) {
  //   target = element.closest('form').querySelector('.show-rating')
  //   target.innerHTML = '<i class="far fa-star"></i>'
  //   multiplyNode(target.querySelector('i'), parseInt(element.value,10), true);
  // }

  function switchSide(element) {
    container = element.closest('.required-question-switch-container')
    switch_button = element.closest('.required-question-switch')
    form = element.closest('form')
    hidden_submit = form.querySelector('.hidden-submit')

    if (element.checked == true) {
      setTimeout(function(){switch_button.classList.add('switch_checked')}, 100)
    } else {
      setTimeout(function(){switch_button.classList.remove('switch_checked')}, 100)
    }
    if (hidden_submit != undefined) {
      hidden_submit.click();
    }
  }

  ///////////////////
  // SAVE QUESTION //
  ///////////////////

  function saveQuestion(element, keyup = false) {
    form = element.closest('form')

    if (doubleClickGuardian == false) {
      doubleClickGuardian = true
      initial_value = element.value;

      if (keyup && !saving) {
        saving = true
        setTimeout(function(){
          form.querySelector('.hidden-submit').click()
          saving = false
        }, 3000)
      } else {
        form.querySelector('.hidden-submit').click()
      }

      setTimeout(function(){doubleClickGuardian = false}, 500)
    }
  }

  document.querySelectorAll('.trix-content').forEach((trix) => {
    if (trix.parentNode.querySelector('.trix_editor') == null) {
      trix.innerHTML = ''
    } else {
      trix.innerHTML = trix.parentNode.querySelector('.trix_editor').value
    }
    trix.addEventListener('keyup', (event) => {
      if (!saving) {
        saving = true
        setTimeout(function(){
          trix.parentNode.querySelector('.trix_editor').value = trix.innerHTML
          trix.closest('form').querySelector('.hidden-submit').click()
          saving = false
        }, 3000)
      }
    })
  })

  ///////////////////


  function updateContent(element) {
    form = element.closest('form')
    submit = form.querySelector('.hidden-submit')
    window.addEventListener('click', function(e) {
      if (outsideClick(e, element) && doubleClickGuardian == false) {
        submit.click();
        this.removeEventListener('click', arguments.callee, false);
      }
    })
  }

  function multiplyNode(node, count, deep) {
    for (var i = 0, copy; i < count - 1; i++) {
        copy = node.cloneNode(deep);
        node.parentNode.insertBefore(copy, node);
    }
  }

  function openEditOptionForm(element) {
    if (doubleClickGuardian == false) {
      doubleClickGuardian = true
      li = element.querySelector('li')
      form = element.querySelector('.hidden-form-ajax')
      input = form.querySelector('#edit_option_option')
      li.classList.add('hidden')
      form.classList.remove('hidden')
      input.focus()
      // input.selectionStart = input.selectionEnd = input.value.length
      window.addEventListener('click', function(e) {
        if (outsideClick(e, element)) {
          e.stopPropagation()
          e.preventDefault()
          li.classList.remove('hidden')
          form.classList.add('hidden')
          this.removeEventListener('click', arguments.callee, false);
          setTimeout(function(){doubleClickGuardian = false}, 250)
        }
      })
    }
  }

  function toggleMod(element) {
    caret = element.querySelector('i')
    angle = parseInt(caret.getAttribute('data-rotated'), 10)
    caret.style.webkitTransform = 'rotate('+ (angle + 180).toString() +'deg)'
    caret.style.mozTransform    = 'rotate('+ (angle + 180).toString() +'deg)'
    caret.style.msTransform     = 'rotate('+ (angle + 180).toString() +'deg)'
    caret.style.oTransform      = 'rotate('+ (angle + 180).toString() +'deg)'
    caret.style.transform       = 'rotate('+ (angle + 180).toString() +'deg)'
    caret.setAttribute('data-rotated', (angle + 180).toString())
    block = element.parentNode.parentNode
    p = element.querySelector('p')
    block_width = block.offsetWidth
    if (block.style.maxHeight == '61px' || block.style.maxHeight == '') {
      block.style.maxHeight = '100000px'
      p.style.maxHeight = '100000px'
      p.style.whiteSpace = 'normal'
      block.style.width = block_width.toString() + 'px'
      block.classList.add('active')
    } else if (block.style.maxHeight == '100000px') {
      block.style.maxHeight = '61px'
      p.style.maxHeight = '18px'
      p.style.whiteSpace = 'nowrap'
      block.style.width = 'auto'
      block.classList.remove('active')
    }
  }

  function toggleTagCategoryDropdown(element) {
    caret = element.querySelector('i')
    angle = parseInt(caret.getAttribute('data-rotated'), 10)
    caret.style.webkitTransform = 'rotate('+ (angle + 180).toString() +'deg)'
    caret.style.mozTransform    = 'rotate('+ (angle + 180).toString() +'deg)'
    caret.style.msTransform     = 'rotate('+ (angle + 180).toString() +'deg)'
    caret.style.oTransform      = 'rotate('+ (angle + 180).toString() +'deg)'
    caret.style.transform       = 'rotate('+ (angle + 180).toString() +'deg)'
    caret.setAttribute('data-rotated', (angle + 180).toString())
    block = element.parentNode.parentNode
    if (block.style.maxHeight == '60px' || block.style.maxHeight == '') {
      block.style.maxHeight = '10000px'
      block.classList.add('active')
    } else {
      block.style.maxHeight = '60px'
      block.classList.remove('active')
    }
  }

  function autoSubmitTag(element) {
    element.closest('form').querySelector('.hidden-submit').click()
  }


</script>
