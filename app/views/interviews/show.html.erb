<div id="interview-container"
     class="interview-container bkt-bg-light-blue">

  <%= render 'interviews/show/show_display', interview: @interview, employee: @employee,
                                             manager: @manager, template: @template,
                                             questions: @questions %>

</div>

<div class="saved-message hidden">
  <p>SAVED!</p>
</div>


<!------------>
<!-- MODALS -->
<!------------>

<div id='interviewConfirmSubmit'
     class='modal info-modal fade'
     tabindex='-1'
     role='dialog'
     data-backdrop="static"
     data-keyboard="false">

  <div class='modal-dialog info-modal__dialog'
       role='document'>
    <%= render 'interviews/modals/confirm_submit' %>
  </div>

</div>

<div id='confirmGoBack'
     class='modal info-modal fade'
     tabindex='-1'
     role='dialog'
     data-backdrop="static"
     data-keyboard="false">

  <div class='modal-dialog info-modal__dialog'
       role='document'>
    <%= render 'interviews/modals/confirm_later' %>
  </div>

</div>

<!---------------->
<!-- JAVASCRIPT -->
<!---------------->

<script>
  var auto_save = true
  var doubleClickGuardian = false
  var timer
  const waitTime = 1000

  function outsideClick(event, notelem) {
    notelem = $(notelem); // jquerize (optional)
    // check outside click for multiple elements
    var clickedOut = true, i, len = notelem.length;
    for (i = 0; i < len; i++) {
      if (event.target == notelem[i] || notelem[i].contains(event.target)) {
        clickedOut = false;
      }
    }
    if (clickedOut) return true;
    else return false;
  }

  function autoSave(element) {
    updateStatusMessage("Updating...")
    const form = element.closest('form')

    clearTimeout(timer);

    timer = setTimeout(() => {
      form.querySelector('.hidden-submit').click()
    }, waitTime);
  }

  function enableSubmit() {
    required_answers = document.querySelectorAll('#interview_answer_answer:required, #interview_answer_objective:required')
    submit_buttons = document.querySelectorAll('#submit-interview')
    link = document.getElementById('submit-interview-link')

    required_answers.forEach((input) => {
      if (input.value == '') {
        submit_buttons.forEach((button) => {
          button.classList.add('btn-blue-disabled')
          button.disabled = true
          link.href = ''
        })
        return
      }
    })
  }

  function saveButton(message = true) {
    document.querySelector('body').classList.add('wait')
    if (<%= @interview.crossed? && !@interview.submitted? %>) {
      document.querySelectorAll('form.interview_answer').forEach((form) => {
        setTimeout(function () {
          form.querySelector('.hidden-submit').click();
        }, 1000);

      })
    }
    if (message) {
      setTimeout(function () {
        document.querySelector('body').classList.remove('wait')
        document.querySelector('.saved-message').classList.remove('hidden')
        setTimeout(function () {
          document.querySelector('.saved-message').classList.add('hidden')
        }, 1500)
      }, 1500)
    } else {
      document.querySelector('body').classList.remove('wait')
    }
  }

  function submitAndLock() {
    const submit_button = document.getElementById('submit-interview-link')

    submit_button.click()
  }

  // AUTO UPDATE TEXTAREA HEIGHT //

  const tx = document.getElementsByTagName("textarea");
  for (let i = 0; i < tx.length; i++) {
    tx[i].setAttribute("style", "height:auto;overflow-y:hidden;");
    tx[i].addEventListener("click", OnInput, false);
    tx[i].addEventListener("input", OnInput, false);
    // tx[i].click()
    OnInput(tx[i])
  }

  function OnInput(target = undefined) {

    if (target.target) {
      this.style.height = "auto";
      this.style.height = (this.scrollHeight) + "px";
    } else {
      target.style.height = "auto";
      target.style.height = (target.scrollHeight) + "px";
    }

  }


  ////////////////////
  // BOOKLET SELECT //
  ////////////////////

  function BookletSelectExpand(element) {
    doubleClickGuardian = true
    dropdown = element.closest('.booklet-select__container').querySelector('.booklet-select__dropdown')
    setTimeout(() => {
      doubleClickGuardian = false
    }, 100);
    if (dropdown.classList.contains('hidden')) {
      dropdown.classList.remove('hidden')
      window.addEventListener('click', function (e) {
        if (outsideClick(e, element) && !doubleClickGuardian) {
          dropdown.classList.add('hidden')
          this.removeEventListener('click', arguments.callee, false);
        }
      });
    } else {
      dropdown.classList.add('hidden')
    }
  }

  function BookletSelectSubmit(element) {
    form = element.closest('form')
    selected_display = element.closest('.booklet-select__container').querySelector('.booklet-select__selected')
    selected_value = element.querySelector('p').innerText
    storage = form.querySelector('#interview_answer_answer')
    submit_button = form.querySelector('.hidden-submit')

    storage.value = selected_value
    selected_display.querySelector('p').innerText = selected_value
    submit_button.click()
  }

  function BookletSelectRemoveAnswer(element) {
    form = element.closest('form')
    selected_display = element.closest('.booklet-select__selected')
    storage = form.querySelector('#interview_answer_answer')
    submit_button = form.querySelector('.hidden-submit')

    selected_display.querySelector('p').innerText = ''
    element.classList.add('hidden')
    storage.value = ''
    submit_button.click()
  }


  ////////////////////
  // STATUS MESSAGE //
  ////////////////////

  function updateStatusMessage(message) {
    const message_storage = document.getElementById('xhr-form-status-btn')

    if (message_storage == undefined) return

    if (message == 'Up to date') {
      message_storage.classList.remove('bkt-red')
      message_storage.classList.remove('bkt-yellow')
      message_storage.classList.add('bkt-green')
    } else if (message == 'Update failed') {
      message_storage.classList.remove('bkt-green')
      message_storage.classList.remove('bkt-yellow')
      message_storage.classList.add('bkt-red')
    } else {
      message_storage.classList.remove('bkt-green')
      message_storage.classList.remove('bkt-red')
      message_storage.classList.add('bkt-yellow')
    }

    message_storage.innerText = message
  }


  /////////////
  // ON LOAD //
  /////////////

  saveButton(false)
</script>
