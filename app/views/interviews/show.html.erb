<% if @interview.crossed? %>

  <%= render 'crossed', interview: @interview, employee: @employee, manager: @manager, questions: @questions, read_only: ![@interview.employee, @interview.owner].include?(current_user)  %>

<% else %>

  <% visibility = current_user.manager_or_above? ? ['all', 'manager'] : ['all', 'employee'] %>

  <div class="interview-container">
    <div class="interview-start">
      <div class='empty-div'></div>
      <div class="interview-title">
        <h1><%= @interview.interview_form.title %></h1>
        <p><%= sanitize @interview.interview_form.description %></p>
      </div>
      <button class="btn-blue btn-blue-start btn-blue-start--mobile" onclick='nextQuestion(this);'><p'>Start !</p></button>
    </div>
    <% j = 1 %>
    <% @questions.where.not(question_type: 'separator').where(visible_for: visibility).each do |question| %>
      <div class="interview-question hidden" id='question-<%= j %>'>
        <div class="interview-separator">
          <% previous_separators = @questions.where(question_type: 'separator').where('position <= ?', question.position) %>
          <h2><%= previous_separators.last.question if previous_separators.present? %></h2>
          <p><%= sanitize previous_separators.last.description if previous_separators.present? %></p>
        </div>
        <%= render 'interview_questions/show_interview_question_form', questions: @questions, question: question, j: j, read_only: ((@interview.label == 'Employee' && @interview.employee != current_user) || (@interview.label == 'Manager' && @interview.owner != current_user)) %>
      </div>
      <% j += 1 %>
    <% end %>
    <%= link_to '', interview_path(@interview, show_review: 'true'), remote: true, class: 'hidden-link hidden' %>
    <div class="interview-review hidden">
      <% if @interview.completed %>
        <%= render 'interviews/show_interview_review', interview: @interview %>
      <% end %>
    </div>
  </div>
      <div class="interview-progress-bar-container">
      <div class="interview-progress-bar"></div>
      <div class='interview-progress-bar__white'><p>0%</p></div>
      <div class='interview-progress-bar__blue'><p>0%</p></div>
    </div>
<% end %>


<!---------------->
<!-- JAVASCRIPT -->
<!---------------->

<script>
  document.querySelector('body').classList.add('interview-form-body')

  function sleep(milliseconds) {
    var start = new Date().getTime();
    for (var i = 0; i < 1e7; i++) {
      if ((new Date().getTime() - start) > milliseconds){
        break;
      }
    }
  }

  const canAnswer = async (element) => {
    const response = await fetch('/interview/answer/authorization_checks', {
      method: "POST",
      headers: {
        "X-CSRF-Token": csrfToken(),
        "Content-Type": "application/json"
      },
      body: answerFormPayload(element.form)
    })
    return await response.json()
  }

  const alertCanAnswer = async (element) => {
    // TODO call form all questions type (currently only rating)
    const canAnswerResult = await canAnswer(element)
    if (canAnswerResult.can_answer_question) return

    alert("View mode only! New answers won't be saved!")
  }

  const selectRating = (element) => {
    alertCanAnswer(element)

    fieldset = element.closest('fieldset')
    fieldset.querySelectorAll('.radio-rating').forEach((radio_button) => {
      if (parseInt(radio_button.id.split('-')[2],10) <= element.id.split('-')[2]) {
        radio_button.classList.add('on')
      } else {
        radio_button.classList.remove('on')
      }
    })
  }

  function enableNext(element) {
    // TODO Avoid DOM selection by position. Breakbla. Select DOM elements by id
    button = element.closest('.interview-question').querySelectorAll('.btn-blue')[1]
    if (element.closest('form').getAttribute('data-question-type') == 'objective') {
      form = element.closest('form')
      radio_selected = false
      condition = form.querySelector('#interview_answer_objective').value.length > 0 && form.querySelector('input[type=radio]:checked') != null
    } else {
      condition = element.value.length > 0
    }
    if (condition && button != undefined) {
      button.classList.remove('btn-blue-disabled')
      button.disabled = false
    } else if (!condition && button != undefined) {
      button.classList.add('btn-blue-disabled')
      button.disabled = true
    }
  }

  function nextQuestion(element) {
    if (element.classList.contains('btn-blue-start')) {
      question = document.querySelectorAll('.interview-question')[0]
      start = document.querySelector('.interview-start')
      question.classList.remove('hidden')
      start.classList.add('hidden')
    } else {
      position = parseInt(element.closest('.interview-question').id.split('-')[1],10)
      question = document.querySelectorAll('.interview-question')[position]
      previous_question = document.querySelectorAll('.interview-question')[position - 1]
      previous_question.querySelector('.hidden-submit').click()
      previous_question.classList.add('hidden')
      question.classList.remove('hidden')
    }
    updateProgressionBar()
  }

  function previousQuestion(element) {
    position = parseInt(element.closest('.interview-question').id.split('-')[1],10)
    question = document.querySelectorAll('.interview-question')[position - 1]
    if (position - 1 == 0) {
      start = document.querySelector('.interview-start')
      start.classList.remove('hidden')
      question.classList.add('hidden')
    } else {
      previous_question = document.querySelectorAll('.interview-question')[position - 2]
      previous_question.classList.remove('hidden')
      question.classList.add('hidden')
    }
    updateProgressionBar()
  }

  function goToQuestion(element, option = '') {
    summary = document.querySelector('.interview-review')
    progression_bar = document.querySelector('.interview-progress-bar-container')
    if (option == 'summary') {
      current_question = element.closest('.interview-question')
      current_question.querySelector('.hidden-submit').click()
      document.querySelector('body').classList.add('wait')
      setTimeout(function(){document.querySelector('.hidden-link').click();progression_bar.classList.add('hidden')}, 500)
    } else {
      target_position = parseInt(element.id.split('-')[1],10)
      question = document.querySelector('#question-' + target_position)
      progression_bar.classList.remove('hidden')
      summary.classList.add('hidden')
      question.classList.remove('hidden')
    }
    updateProgressionBar()
  }

  const csrfToken = () => document.querySelector("[name='csrf-token']").content

  const getInterviewFormInputValueForAnswer = (form) => {
    if (form.dataset.questionType == 'rating' || form.dataset.questionType == 'mcq') {
      let checkedValue = ''
      form.querySelectorAll('[name="interview_answer[answer]"]')
          .forEach((input) => { if (input.checked) { checkedValue = input.value } })
      return checkedValue
    } else {
      return getInterviewFormInputValue(form, 'answer')
    }
  }

  const getInterviewFormInputValue = (form, name) =>
    form.querySelector(`[name="interview_answer[${name}]"]`)?.value

  const answerFormPayload = (form) => JSON.stringify({
    interview_answer: {
      answer: getInterviewFormInputValueForAnswer(form),
      comments: getInterviewFormInputValue(form, 'comments'),
      interview_id: getInterviewFormInputValue(form, 'interview_id'),
      interview_question_id: getInterviewFormInputValue(form, 'interview_question_id'),
    }
  })

  const submitAnswers = async (element, option = '') => {
    if (option == 'Crossed') {
      const forms =
        [...element.closest('.interview-summary').querySelectorAll('.hidden-submit')]
        .map((b) => b.form)

      await Promise.all(
        forms.map(async form => {
          const resp = await fetch(form.action, {
            method: "POST",
            headers: {
              "X-CSRF-Token": csrfToken(),
              "Content-Type": "application/json"
            },
            body: answerFormPayload(form)
          })
          return resp.text();
        })
      )
    } else {
      position = parseInt(element.closest('.interview-question').id.split('-')[1],10)
      last_question = document.querySelectorAll('.interview-question')[position - 1]
      last_question.querySelector('.hidden-submit').click()
      const form = last_question.querySelector('.hidden-submit').form
      // await fetch(form.action, {
      //   method: "POST",
      //   headers: {
      //     "X-CSRF-Token": csrfToken(),
      //     "Content-Type": "application/json"
      //   },
      //   body: answerFormPayload(form)
      // })
    }
    document.querySelector('.hidden-link').click()
  }

  function updateProgressionBar() {
    container = document.querySelector('.interview-progress-bar-container')
    center_blue = document.querySelector('.interview-progress-bar__blue')
    center_white = document.querySelector('.interview-progress-bar__white')
    if (document.querySelector('.interview-question:not(.hidden)') != null) {
      result = Math.floor((parseInt(document.querySelector('.interview-question:not(.hidden)').id.split('-')[1],10) / document.querySelectorAll('.interview-question').length * 100)).toString() + '%'
      center_white.querySelector('p').innerText = result
      center_blue.querySelector('p').innerText = result
    } else {
      center_white.querySelector('p').innerText = '0%'
      center_blue.querySelector('p').innerText = '0%'
    }
    progression = document.querySelector('.interview-progress-bar__white').querySelector('p').innerText
    filling_bar = document.querySelector('.interview-progress-bar')
    filling_bar.style.width = progression
    if (filling_bar.offsetWidth == 0) {
      center_white.style.width = '0px'
      center_blue.style.width = '100px'
    } else if (filling_bar.offsetWidth > (container.offsetWidth / 2) - 25) {
      center_white.style.width = parseInt(progression.split('%'),10).toString() + 'px'
      center_blue.style.width = (100 - parseInt(progression.split('%')[0],10)).toString() + 'px'
    }
  }

  review = document.querySelector('.interview-review')
  if (review != undefined && review.innerHTML != "\n    ") {
    document.querySelector('body').classList.add('wait')
    document.querySelectorAll('.interview-question__controls:not(.review-controls)').forEach((div) => {
      newBtn = document.createElement("button");
      newBtn.classList.add('btn-blue')
      newBtn.innerHTML = '<p>Review</p>'
      newBtn.onclick = function(event) {
        goToQuestion(this, 'summary')
      }
      div.innerHTML = ''
      div.appendChild(newBtn)
    })
    document.querySelector('.interview-start').classList.add('hidden')
    document.querySelector('.interview-progress-bar-container').classList.add('hidden')
    document.querySelector('.interview-review').classList.remove('hidden')
    document.querySelector('body').classList.remove('wait')
  }

  document.querySelectorAll('.trix-content').forEach((trix) => {
    trix.value = trix.parentNode.querySelector('.trix_editor').value
    trix.addEventListener('keyup', (event) => {
      trix.parentNode.querySelector('.trix_editor').value = trix.value
      enableNext(trix.parentNode.querySelector('.trix_editor'))
    })
  })
</script>
