<% employee = @interview.employee %>
<% manager = @interview.interviewer %>

<% template = @interview.interview_form %>

<% visibility =
     if @interview.crossed?
       ['all', 'manager', 'employee']
     elsif @interview.manager?
       ['all', 'manager']
     else
       ['all', 'employee']
     end %>

<% fully_answered = @interview.fully_answered? %>

<div class="interview-container">

  <div class="d-none d-sm-flex justify-content-between interview-controls p-2rem bkt-bg-white bkt-box-shadow-light pos-fix z-index-150" style='top: 7.5rem; left: 0; right: 0; height: 9rem;'>
    <% if @interview.locked? %>
      <%= link_to my_interviews_path, class: 'd-inline-flex align-items-center fs-2rem bkt-blue bkt-box-shadow-medium p-3 rounded-5px font-weight-500' do %>
          <span class="iconify mr-3" data-icon="bi:arrow-left"></span>
          <p class="">Close</p>
      <% end %>
    <% else %>
      <button
        data-toggle='modal'
        data-target='#confirmGoBack'
        class="bkt-btn-white-light bkt-blue"
      >
        <span class="iconify mr-3" data-icon="bi:arrow-left"></span>
        <p class="">Close and submit later</p>
      </button>
    <% end %>

    <div class="flex-column">
      <div class="interview-controls__buttons">
        <%= link_to interview_path(@interview, format: :pdf), class: 'height-4rem flex-row-center-centered bkt-blue bkt-bg-light-grey4-hover rounded-5px p-2rem', id: 'interview-export-pdf', target: :_blank do %>
          <span class="iconify" data-icon="bx:bx-download"></span>
          <p>Download PDF</p>
        <% end %>

        <% if InterviewPolicy.new(current_user, @interview).answer_question? %>
          <p class="p-2 bkt-green mx-5" id="xhr-form-status-btn">Up to date</p>

          <a href='<%= lock_interview_path(interview_id: @interview.id) if fully_answered %>'
             data-url='<%= lock_interview_path(interview_id: @interview.id) %>'
             id='submit-interview-link'
             class='d-none'>
          </a>

          <button id="submit-interview"
                  class="btn-blue btn-blue  <%= 'btn-blue-disabled' unless fully_answered %>"
                  data-toggle='modal'
                  data-target='#interviewConfirmSubmit'
                  <%= 'disabled' unless fully_answered %>>
            <p>Submit</p>
            <span class="iconify ml-2" data-icon="fluent:send-16-filled" style="color: white;"></span>
          </button>

        <% end %>
      </div>
    </div>
  </div>

  <div class="interview-main">

    <div class='interview-main__left bkt-bg-white py-3rem px-5rem border-right-bkt-light-grey pos-fix z-index-100' style='top: 16.5rem; left: 0;'>
      <%= render 'interview_forms/edit/edit_show_summary', template: template %>
    </div>

    <div class="interview-main__right">

      <div class="flex-row-start-centered width-100">
        <%= link_to :back, class: 'flex-row-center-centered d-sm-none height-5rem width-5rem' do %>
          <i class="fas fa-angle-left fs-2_4rem"></i>
        <% end %>
      </div>


      <h1 class="fs-2_4rem font-weight-700 mb-2rem"><%= @interview.campaign.title %></h1>

      <div class="trix-display">
        <%= sanitize template.description %>
      </div>

      <% video = template.video %>

      <% if video.present? %>
        <iframe class='mb-5rem' src="<%= VideoHelper.embed_video(@interview.interview_form.video) %>" style='width: 75%; aspect-ratio: 16 / 9;'></iframe>
      <% end %>

      <% question_num = 0 %>

      <%
        QuestionDecorator.decorate_collection(
          @interview.interview_form.interview_questions
                    .order(position: :asc)
                    .where(visible_for: visibility)
        ).each do |question|
      %>
        <% if question.separator? %>
          <div class="interview-main__right-separator">
            <p class='pb-1rem'><%= question.question %></p>
          </div>
          <div class="trix-display">
            <%= sanitize question.description %>
          </div>
        <% end %>

        <% next if question.separator? %>

        <% question_num += 1 %>

        <div class="interview-main__right-questions">
          <div class="interview-main__right-question">
            <a id="anchor-<%= question.id %>" style='position:absolute; top: -21.5rem;'></a>
            <div title='<%= "Required" if question.required? %>' class='interview-main__right-question-title'>
              <p><%= question_num %>. </p>
              <span class="iconify" data-icon="<%= question.icon %>"></span>
              <p><%= question.question %> <%= "*" if question.required_for?(@interview.label == 'Employee' ? 'employee' : 'manager') %></p>
            </div>
            <div class="interview-main__right-question-description">
              <%= sanitize question.description %>
            </div>

            <%= render 'interview_questions/show_interview_question_form',
                       interview: @interview,
                       question: question,
                       manager: manager,
                       employee: employee,
                       read_only: (
                         (@interview.employee? && employee != current_user) ||
                           (@interview.manager? && manager != current_user) ||
                           (@interview.simple? && manager != current_user) ||
                           @interview.locked?
                       ),
                       company: current_user.company
            %>
          </div>
        </div>
      <% end %>

    </div>

  </div>

  <div class="interview-controls--mobile">
    <div class="interview-controls__buttons--mobile">
      <%= link_to interview_path(@interview, format: :pdf), class: 'btn-blue-text', id: 'interview-export-pdf', target: :_blank do %>
        <span class="iconify" data-icon="bx:bx-download"></span>
      <% end %>
      <% if InterviewPolicy.new(current_user, @interview).answer_question? %>
        <button class="btn-blue-text" id="save-interview" onclick="saveButton();">
          <span class="iconify" data-icon="fluent:save-16-regular"></span>
          <p>Save</p>
        </button>
        <button id="submit-interview"
                class="btn-blue btn-blue  <%= 'btn-blue-disabled' unless fully_answered %>"
                data-toggle='modal'
                data-target='#interviewConfirmSubmit'
                <%= 'disabled' unless fully_answered %>>
          <p>Submit</p>
          <span class="iconify" data-icon="fluent:send-16-filled" style="color: white;"></span>
        </button>
      <% end %>
    </div>
  </div>

</div>

<div class="saved-message hidden">
  <p>SAVED!</p>
</div>


<!------------>
<!-- MODALS -->
<!------------>

<div class='modal fade' id='interviewConfirmSubmit' tabindex='-1' role='dialog' data-backdrop="static" data-keyboard="false">
  <div class='modal-dialog' role='document'>
    <%= render 'interviews/modals/confirm_submit' %>
  </div>
</div>

<div class='modal fade' id='confirmGoBack' tabindex='-1' role='dialog' aria-labelledby='myModalLabel' data-backdrop="static" data-keyboard="false">
  <div class='modal-dialog' role='document'>
    <%= render 'interviews/modals/confirm_later' %>
  </div>
</div>

<!---------------->
<!-- JAVASCRIPT -->
<!---------------->

<script>
  var auto_save = true
  var doubleClickGuardian = false
  var timer
  const waitTime = 1000

  function outsideClick(event, notelem) {
    notelem = $(notelem); // jquerize (optional)
    // check outside click for multiple elements
    var clickedOut = true, i, len = notelem.length;
    for (i = 0; i < len; i++) {
      if (event.target == notelem[i] || notelem[i].contains(event.target)) {
        clickedOut = false;
      }
    }
    if (clickedOut) return true;
    else return false;
  }

  function autoSave(element) {
    updateStatusMessage("Updating...")
    const form = element.closest('form')

    clearTimeout(timer);

    timer = setTimeout(() => {
      form.querySelector('.hidden-submit').click()
    }, waitTime);
  }

  function enableSubmit() {
    required_answers = document.querySelectorAll('#interview_answer_answer:required, #interview_answer_objective:required')
    submit_buttons = document.querySelectorAll('#submit-interview')
    link = document.getElementById('submit-interview-link')

    required_answers.forEach((input) => {
      if (input.value == '') {
        submit_buttons.forEach((button) => {
          button.classList.add('btn-blue-disabled')
          button.disabled = true
          link.href = ''
        })
        return
      }
    })
  }

  function saveButton(message = true) {
    document.querySelector('body').classList.add('wait')
    if (<%= @interview.crossed? && !@interview.submitted? %>) {
      document.querySelectorAll('form.interview_answer').forEach((form) => {
        setTimeout(function () {
          form.querySelector('.hidden-submit').click();
        }, 1000);

      })
    }
    if (message) {
      setTimeout(function () {
        document.querySelector('body').classList.remove('wait')
        document.querySelector('.saved-message').classList.remove('hidden')
        setTimeout(function () {
          document.querySelector('.saved-message').classList.add('hidden')
        }, 1500)
      }, 1500)
    } else {
      document.querySelector('body').classList.remove('wait')
    }
  }

  function submitAndLock() {
    const submit_button = document.getElementById('submit-interview-link')

    submit_button.click()
  }

  // AUTO UPDATE TEXTAREA HEIGHT //

  const tx = document.getElementsByTagName("textarea");
  for (let i = 0; i < tx.length; i++) {
    tx[i].setAttribute("style", "height:auto;overflow-y:hidden;");
    tx[i].addEventListener("click", OnInput, false);
    tx[i].addEventListener("input", OnInput, false);
    tx[i].click()
  }

  function OnInput() {
    this.style.height = "auto";
    this.style.height = (this.scrollHeight) + "px";
  }


  ////////////////////
  // BOOKLET SELECT //
  ////////////////////

  function BookletSelectExpand(element) {
    doubleClickGuardian = true
    dropdown = element.closest('.booklet-select__container').querySelector('.booklet-select__dropdown')
    setTimeout(() => {
      doubleClickGuardian = false
    }, 100);
    if (dropdown.classList.contains('hidden')) {
      dropdown.classList.remove('hidden')
      window.addEventListener('click', function (e) {
        if (outsideClick(e, element) && !doubleClickGuardian) {
          dropdown.classList.add('hidden')
          this.removeEventListener('click', arguments.callee, false);
        }
      });
    } else {
      dropdown.classList.add('hidden')
    }
  }

  function BookletSelectSubmit(element) {
    form = element.closest('form')
    selected_display = element.closest('.booklet-select__container').querySelector('.booklet-select__selected')
    selected_value = element.querySelector('p').innerText
    storage = form.querySelector('#interview_answer_answer')
    submit_button = form.querySelector('.hidden-submit')

    storage.value = selected_value
    selected_display.querySelector('p').innerText = selected_value
    submit_button.click()
  }

  function BookletSelectRemoveAnswer(element) {
    form = element.closest('form')
    selected_display = element.closest('.booklet-select__selected')
    storage = form.querySelector('#interview_answer_answer')
    submit_button = form.querySelector('.hidden-submit')

    selected_display.querySelector('p').innerText = ''
    element.classList.add('hidden')
    storage.value = ''
    submit_button.click()
  }


  ////////////////////
  // STATUS MESSAGE //
  ////////////////////

  function updateStatusMessage(message) {
    const message_storage = document.getElementById('xhr-form-status-btn')

    if (message_storage == undefined) return

    if (message == 'Up to date') {
      message_storage.classList.remove('bkt-red')
      message_storage.classList.remove('bkt-yellow')
      message_storage.classList.add('bkt-green')
    } else if (message == 'Update failed') {
      message_storage.classList.remove('bkt-green')
      message_storage.classList.remove('bkt-yellow')
      message_storage.classList.add('bkt-red')
    } else {
      message_storage.classList.remove('bkt-green')
      message_storage.classList.remove('bkt-red')
      message_storage.classList.add('bkt-yellow')
    }

    message_storage.innerText = message
  }


  /////////////
  // ON LOAD //
  /////////////

  saveButton(false)
</script>
