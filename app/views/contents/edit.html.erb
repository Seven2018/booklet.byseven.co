<div class="centered-item p-2rem bkt-bg-white bkt-box-shadow-light pos-fix z-index-150" style='top: 7.5rem; left:  0; right: 0; height: 9rem;'>
  <%= render_component BackComponent.new(fallback: catalogue_path) %>
  <h2>Edit Workshop</h2>
  <div class="height-5rem flex-row-between-centered pos-abs" style='top: 2rem; right: 2rem;'>
    <p id='content-edit__update-status' class='bkt-green mr-2rem'>Up to date</p>
    <%= link_to content_path(@content), class: 'flex-row-between-centered bkt-bg-light-orange rounded-10px p-2rem' do %>
      <span class="iconify bkt-orange mr-1rem" data-icon="akar-icons:eye"></span>
      <p class='bkt-orange'>See worskhop preview</p>
    <% end %>
  </div>
</div>

<div id="content-edit__container" class='flex-row-between-start bkt-bg-light-orange pos-rel bkt-box-shadow-compact-top' style='margin-top: 9rem;'>
  <div id="content-edit__container-left" class='bkt-bg-white py-3rem px-5rem border-right-bkt-light-grey pos-fix z-index-100' style='top: 16.5rem; left: 0;'>
    <%= render 'contents/edit/edit_show_summary', content: @content %>
  </div>

  <div id="content-edit__container-right" style='margin-left: 30rem;'>

      <div id="content-edit__content" class='flex-row-between-start'>

        <div id="content-edit__content-center" class='flex-column-start-centered'>

          <div id="content-edit__attributes-center" class='rounded-10px mb-2rem overflow-hidden' style='width: 100%; max-width: 64rem;'>
            <%= render 'contents/edit/edit_content_picture', content: @content %>
          </div>

          <div id="content-edit__attributes-center" class='bkt-bg-white rounded-10px p-2rem mb-2rem' style='width: 100%; max-width: 64rem;'>
            <%= render 'contents/edit/edit_content_attributes', content: @content %>
          </div>

          <div style='width: 100%; max-width: 64rem;'>
            <%= render 'contents/edit/edit_add_mod', position: 0 %>
          </div>

          <div id="content-edit__lines" style='width: 100%; max-width: 64rem;'>
            <%= render 'contents/edit/edit_mods_index', content: @content %>
          </div>

      </div>

      <div class="m-1rem"></div>

      <div id="template-edit__content-right" style=''>
        <div class="template-show-attributes-right">
          <%= render 'contents/edit/edit_content_settings', content: @content %>
        </div>
      </div>

    </div>

  </div>
</div>


<div class='mod-templates hidden'>

  <div class="add-text add-text-template hidden active">
    <%= render 'contents/edit/edit_mod_form_template', mod_type: 'text', content_id: @content.id %>
  </div>

  <div class="add-video add-video-template hidden active">
    <%= render 'contents/edit/edit_mod_form_template', mod_type: 'video', content_id: @content.id %>
  </div>

  <div class="add-assessment add-assessment-template hidden">
    <%= render 'contents/edit/edit_mod_form_template', mod_type: 'assessment', content_id: @content.id %>
  </div>

</div>


<!------------>
<!-- MODALS -->
<!------------>

<div class='modal fade' id='addTags' tabindex='-1' role='dialog' aria-labelledby='myModalLabel'  data-backdrop="static" data-keyboard="false">
  <div class='modal-dialog' role='document' style='border-radius: 20px'>
    <%= render 'contents/modals/manage_categories', content: @content %>
  </div>
</div>


<!---------------->
<!-- JAVASCRIPT -->
<!---------------->

<script>

  ///////////
  // TOOLS //
  ///////////

  doubleClickGuardian = false
  saving = false

  function outsideClick(event, notelem) {
    notelem = $(notelem); // jquerize (optional)
    // check outside click for multiple elements
    var clickedOut = true, i, len = notelem.length;
    for (i = 0;i < len;i++)  {
        if (event.target == notelem[i] || notelem[i].contains(event.target)) {
            clickedOut = false;
        }
    }
    if (clickedOut) return true;
    else return false;
  }

  function submitForm(element) {
    element.closest('form').querySelector('.hidden-submit').click()
  }

  function updateStatusMessage(message) {
    message_storage = document.getElementById('content-edit__update-status')

    if (message == 'Up to date') {
      message_storage.classList.add('bkt-green')
      message_storage.classList.remove('bkt-yellow')
    } else {
      message_storage.classList.remove('bkt-green')
      message_storage.classList.add('bkt-yellow')
    }


    message_storage.innerText = message
  }

  // EXPAND / COLLAPSE MOD //

  function toggleMod(element) {
    caret = element.querySelector('i')
    angle = parseInt(caret.getAttribute('data-rotated'), 10)
    caret.style.webkitTransform = 'rotate('+ (angle + 180).toString() +'deg)'
    caret.style.mozTransform    = 'rotate('+ (angle + 180).toString() +'deg)'
    caret.style.msTransform     = 'rotate('+ (angle + 180).toString() +'deg)'
    caret.style.oTransform      = 'rotate('+ (angle + 180).toString() +'deg)'
    caret.style.transform       = 'rotate('+ (angle + 180).toString() +'deg)'
    caret.setAttribute('data-rotated', (angle + 180).toString())
    block = element.parentNode.parentNode
    p = element.querySelector('p')
    block_width = block.offsetWidth
    if (block.style.maxHeight == '61px' || block.style.maxHeight == '') {
      block.style.maxHeight = '100000px'
      p.style.maxHeight = '100000px'
      p.style.whiteSpace = 'normal'
      block.style.width = block_width.toString() + 'px'
      block.classList.add('active')
    } else if (block.style.maxHeight == '100000px') {
      block.style.maxHeight = '61px'
      p.style.maxHeight = '18px'
      p.style.whiteSpace = 'nowrap'
      block.style.width = 'auto'
      block.classList.remove('active')
    }
  }

  // AUTO UPDATE TEXTAREA HEIGHT //

  const tx = document.getElementsByTagName("textarea");
  for (let i = 0; i < tx.length; i++) {
    tx[i].setAttribute("style", "height:auto;overflow-y:hidden;");
    tx[i].addEventListener("click", OnInput, false);
    tx[i].addEventListener("input", OnInput, false);
    tx[i].click()
  }

  function OnInput() {
    this.style.height = "auto";
    this.style.height = (this.scrollHeight) + "px";
  }


  ///////////////////////
  // ADD QUESTION MENU //
  ///////////////////////

  function addModMenu(element) {

    if (doubleClickGuardian == false) {
      doubleClickGuardian = true
      container = element.parentNode
      button_add = element
      button_remove = container.querySelector('.add_button_hide')
      menu = container.querySelector('.content-edit__add-mod-menu')

      container.classList.add('active')
      button_add.classList.add('hidden')
      button_remove.classList.remove('hidden')
      menu.classList.remove('hidden')

      window.addEventListener('click', function(e) {
        if (doubleClickGuardian == false) {
          container.classList.remove('active')
          button_add.classList.remove('hidden')
          button_remove.classList.add('hidden')
          menu.classList.add('hidden')
          this.removeEventListener('click', arguments.callee, false);
        }
      });

      setTimeout(function(){doubleClickGuardian = false}, 100)
    }
  }

  function addMod(type, referenceNode) {
    newDiv = document.createElement("div")
    console.log(type)
    newDiv.classList.add('add-' + type)
    template = document.querySelector('.add-' + type + '-template')
    templateinfo = template.innerHTML
    newDiv.innerHTML = templateinfo
    position = referenceNode.id.split('-')[1]
    position_storage = newDiv.querySelector('#mod_position')

    position_storage.value = position
    content = document.querySelector('#content-edit__lines')
    if (position == 0) {
      content.insertBefore(newDiv, content.firstChild)
    } else {
      content.insertBefore(newDiv, referenceNode.nextSibling)
    }
  }

  //////////////////////
  // QUESTION OPTIONS //
  //////////////////////

  function checkBookletCheckbox(element) {
    updateStatusMessage("Updating...")
    checkbox = element.querySelector('input')
    icon = element.querySelector('svg')

    if (checkbox.value == 'true') {
      checkbox.value = 'false'
      icon.classList.add('hidden')
    } else {
      checkbox.value = 'true'
      icon.classList.remove('hidden')
    }
    saveForm(element)
  }

  function switchSide(element, save = true) {
    updateStatusMessage("Updating...")
    switch_button = element.parentNode
    form = element.closest('form')
    hidden_submit = form.querySelector('.hidden-submit')

    if (element.checked == true) {
      setTimeout(function(){switch_button.classList.add('switch_checked')}, 100)
    } else {
      setTimeout(function(){switch_button.classList.remove('switch_checked')}, 100)
    }
    if (hidden_submit != undefined && save) {
      hidden_submit.click();
    }
  }

  ///////////////////
  // SAVE QUESTION //
  ///////////////////

  function saveForm(element, keyup = false) {
    updateStatusMessage("Updating...")
    form = element.closest('form')

    if (doubleClickGuardian == false) {
      doubleClickGuardian = true
      initial_value = element.value;

      if (keyup && !saving) {
        saving = true
        setTimeout(function(){
          form.querySelector('.hidden-submit').click()
          saving = false
        }, 3000)
      } else {
        form.querySelector('.hidden-submit').click()
      }

      setTimeout(function(){doubleClickGuardian = false}, 500)
    }
  }

  ///////////////////////
  // TEMPLATE SETTINGS //
  ///////////////////////

  function BookletSelectExpand(element) {
    doubleClickGuardian = true
    dropdown = element.closest('.booklet-select__template-edit-container').querySelector('.booklet-select__template-edit-dropdown')
    setTimeout(() => {
      doubleClickGuardian = false
    }, 100);
    if (dropdown.classList.contains('hidden')) {
      dropdown.classList.remove('hidden')
      window.addEventListener('click', function(e) {
        if (!doubleClickGuardian) {
          dropdown.classList.add('hidden')
          this.removeEventListener('click', arguments.callee, false);
        }
      });
    } else {
      dropdown.classList.add('hidden')
    }
  }

  function BookletSelectSubmit(element, attribute) {
    updateStatusMessage("Updating...")
    form = element.closest('form')
    container = element.closest('.booklet-select__template-edit-container')
    selected_display = element.closest('.booklet-select__template-edit-container').querySelector('.booklet-select__template-edit-selected')
    selected_value = element.querySelector('p').innerText
    storage = form.querySelector('#content_' + attribute)
    submit_button = form.querySelector('.hidden-submit')

    storage.value = selected_value
    selected_display.innerText = selected_value

    submit_button.click()
  }


  /////////////////
  // MANAGE TAGS //
  /////////////////

  function manageTag(element, option) {
    tag_id = element.id.split('-')[1]
    tag_checkbox = document.querySelector('#content_categories_' + tag_id)

    if (option == 'add') {
      tag_checkbox.checked = true
    } else if (option == 'remove') {
      tag_checkbox.checked = false
    }

    tag_checkbox.closest('form').querySelector('.hidden-submit').click()
  }

  function showTagDeleteOption(element) {
    // element.parentNode.querySelector('.category-delete').classList.toggle('hidden');
    trash = element.parentNode.querySelector('.category-delete');
    if (trash.style.opacity == 0) {
      trash.style.opacity = 1;
    } else {
      trash.style.opacity = 0;
    }
  }

  function fetchTagForm(element) {
    form = element.parentNode.parentNode.querySelector('.hidden-form-category-ajax');
    initial_top = form.offsetTop
    initial_left = form.offsetLeft
    form.style.top = (element.offsetTop).toString() + 'px'
    form.style.left = (element.offsetLeft + 25).toString() + 'px'
    element.querySelector('p').style.opacity = '0'
    form.classList.toggle('hidden')
    form.querySelector('input').focus()
    formGuardian = true;
    setTimeout(function(){
      formGuardian = false;
    }, 1);

    form.querySelector('#new_category_title').addEventListener('keypress', function(e) {
      if (event.which == '13') {
        event.preventDefault();
        form.querySelector('.hidden-submit').click()
      }
    })

    window.addEventListener('click', function(e) {
      if (outsideClick(e, form) && formGuardian == false) {
        form.style.top = initial_top.toString() + 'px';
        form.style.left = initial_left.toString() + 'px'
        element.querySelector('p').style.opacity = '1'
        form.classList.toggle('hidden')
        form.querySelector('input').value = ''
        this.removeEventListener('click', arguments.callee, false)
      }
    });
  }

</script>
