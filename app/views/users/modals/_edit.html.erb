<div class="modal-content action-modal__content">
  <div class="modal-header action-modal__header">
    <h5 class="modal-title action-modal__title"><%= user.fullname %></h5>
    <button type="button" class="action-modal__close" data-dismiss="modal" aria-label="Close">
      <span aria-hidden="true" class="action-modal__close-icon">&times;</span>
    </button>
  </div>
  <div class="modal-body action-modal__body">
    <%= simple_form_for @user, class:'form-group', namespace: 'desktop-user-form' do |f| %>
      <%= f.input :firstname, label: 'First Name:', class:'form-control', required:true %>
      <%= f.input :lastname, label: 'Last Name:', class:'form-control' %>
      <%= f.input :email, label: 'Email:', class:'form-control' %>
      <% if current_user.admin? %>
        <%= f.input :access_level, label: 'Access Level:', collection: ['Super Admin', 'Account Owner', 'HR', 'Manager', 'Employee'], include_blank: false, selected: @user.access_level.split('-').first %>
      <% elsif current_user.account_owner? %>
        <%= f.input :access_level, label: 'Access Level:', collection: ['Account Owner', 'HR', 'Manager', 'Employee'], include_blank: false, selected: @user.access_level.split('-').first %>
      <% elsif current_user.hr? %>
        <%= f.input :access_level, label: 'Access Level:', collection: ['HR', 'Manager', 'Employee'], include_blank: false, selected: @user.access_level.split('-').first %>
      <% end %>
      <% if current_user.admin? %>
        <%= f.input :company, collection: Company.all, include_blank: false, label: 'Company:' %>
      <% end %>
      <%= f.input :manager_id, collection: User.where(company_id: current_user.company_id, access_level: ['Manager', 'HR', 'Admin', 'Super Admin']).where.not(id: @user.id).order(lastname: :asc), label_method: lambda {|k| k.fullname} %>
      <%= f.input :phone_number, label: 'Phone:', class:'form-control' %>
      <%= f.input :linkedin, label: 'Linkedin (url):', class:'form-control' %>
      <%= f.input :birth_date, as: :date, label: 'Birth date:', class:'form-control', default: Date.new(1970, 1, 1), start_year: Time.zone.today.year - 70,
                              end_year: Time.zone.today.year - 12 %>
      <% if current_user.hr_or_above? %>
        <%= f.input :hire_date, as: :date, label: 'Hire date:', class:'form-control', start_year: Time.zone.today.year - 70,
                              end_year: Time.zone.today.year %>
      <% end %>
      <%= f.input :picture, label: 'Photo URL', class:'form-control' %>
      <% if current_user.hr_or_above? %>
        <div class="new_user_tags">
          <% checked_tags = Tag.joins(:user_tags).where(user_tags: {user_id: @user.id}).map(&:id) %>
          <% TagCategory.where(company_id: current_user.company_id).each do |category| %>
            <% if category.tags.present? %>
              <div class="organisation-filter-block-user">
                <div class="organisation-filter-block-title-user-show">
                  <div>
                    <p><b><%= category.name.capitalize %></b></p>
                    <div class="organisation-filter-block-title-buttons">
                      <div class="btn-icon" onclick='toggleTagCategoryDropdownUser(this);'>
                        <i class="fas fa-angle-down" data-rotated='0'></i>
                      </div>
                    </div>
                  </div>
                </div>
                 <div class="organisation-filter-block-checkboxes-user">
                <%= f.input_field :tags, collection: Tag.where(tag_category_id: category.id).order(tag_name: :asc), label_method: lambda { |tag| "#{tag.tag_name}" }, label: false, as: :check_boxes, checked: checked_tags %>
                </div>
              </div>
            <% end %>
          <% end %>
        </div>
      <% end %>
      <div style=" display: flex; justify-content: center;margin-top:3rem;">
        <%= button_tag type: 'submit', class: 'bkt-btn-white' do %>
          Save
        <% end %>
      </div>
    <% end %>
  </div>
</div>

<script>
  function toggleTagCategoryDropdownUser(element) {
    caret = element.querySelector('i')
    angle = parseInt(caret.getAttribute('data-rotated'), 10)
    caret.style.webkitTransform = 'rotate('+ (angle + 180).toString() +'deg)';
    caret.style.mozTransform    = 'rotate('+ (angle + 180).toString() +'deg)';
    caret.style.msTransform     = 'rotate('+ (angle + 180).toString() +'deg)';
    caret.style.oTransform      = 'rotate('+ (angle + 180).toString() +'deg)';
    caret.style.transform       = 'rotate('+ (angle + 180).toString() +'deg)';
    caret.setAttribute('data-rotated', (angle + 180).toString())
    block = element.parentNode.parentNode.parentNode.parentNode;
    if (block.style.maxHeight == '61px' || block.style.maxHeight == '') {
      block.style.maxHeight = '10000px';
      block.classList.add('active');
    } else {
      block.style.maxHeight = '61px';
      block.classList.remove('active');
    }
  }
</script>
